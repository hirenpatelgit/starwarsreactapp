{"version":3,"sources":["action/auth/authAction.js","typeRedux/typeRedux.js","helper/requestHelper/apiRequest.js","helper/requestHelper/urlSchema.js","helper/requestHelper/apiRequestUrl.js","container/authLogin/authLogin.js","router/routerPath.js","apiRequest/loginApi/loginApi.js","container/searchData/searchDashboard.js","apiRequest/searchApi/searchApi.js","router/rootRouter.js","reducer/auth/authReducer.js","reducer/rootReducer.js","reduxStore/createStoreRedux.js","reduxStore/stateLoader.js","App.js","serviceWorker.js","index.js"],"names":["ACTION_IS_LOGIN","is_login","type","payload","GET_API_REQUEST","str_url","dict_header","fetch","method","headers","then","response","ok","json","Error","responseData","catch","error","BASE_URL","PEOPLE","PLANET","CREATE_REQUEST_URL","str_endpoint","AuthLogin","props","state","txt_username","txt_password","isStartLoader","errorMessage","window","addEventListener","e","history","push","location","pathname","userName","this","setState","Promise","resolve","rejects","Object","keys","length","message","res","name","bdat","setTimerForErrorInvisible","err","isLogin","loginInfo","setTimeout","ACTION_LOGIN_USER_INFO","replace","go","alert","login","sizeUnit","size","color","loading","Row","className","Col","xs","span","offset","lg","attributesInput","id","placeholder","value","onChange","onBlur","console","log","validationOption","check","required","renderLoader","renderError","onClick","btnLoginClicked","Component","_connect","connect","AuthReducer","info","withRouter","SearchDashboard","searchString","searchIndex","serachResults","time","isOn","start","startTimer","bind","stopTimer","resetTimer","Date","now","timer","setInterval","clearInterval","style","btnLogoutClicked","ACTION_LOGOUT","user_login_info","doSearchPlanet","planetName","sort","a","b","population","ex","preventDefault","target","onEnterKeyPress","map","item","i","renderLogoutButton","handleSearch","renderSerachItems","RootRouter","path","component","to","checkIfLogin","renderLoginRouter","renderRouteIfLogin","INIT_STATE","rootReducer","combineReducers","action","stateLoader","serializedState","localStorage","getItem","initializeState","JSON","parse","stringify","setItem","enhancer","composeEnhancers","compose","applyMiddleware","thunk","store","createStore","RootReducer","loadState","subscribe","saveState","getState","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.862ffca0.chunk.js","sourcesContent":["import { TYPE_IS_LOGIN, TYPE_LOGIN_INFO, TYPE_LOGOUT } from \"../../typeRedux\"\n\n// action to store login status\nconst ACTION_IS_LOGIN = (is_login) => {\n    return {\n        type: TYPE_IS_LOGIN,\n        payload: is_login\n    }\n}\n\n// action to store login information\nconst ACTION_LOGIN_USER_INFO = (info) => {\n    return {\n        type: TYPE_LOGIN_INFO,\n        payload: info\n    }\n}\n// action to remove login info \nconst ACTION_LOGOUT = () => {\n    return {\n        type: TYPE_LOGOUT,\n    }\n}\n\nexport {\n    ACTION_IS_LOGIN,\n    ACTION_LOGIN_USER_INFO,\n    ACTION_LOGOUT\n}","/**\n * login\n */\nconst TYPE_IS_LOGIN = \"typeIsLogin\"\nconst TYPE_LOGIN_INFO = \"typeUserLoginInfo\"\nconst TYPE_LOGOUT = \"typeLogout\"\n\nexport {\n    TYPE_IS_LOGIN,\n    TYPE_LOGIN_INFO,\n    TYPE_LOGOUT\n}","\n/**\n * GET REQUEST\n * @param {*} str_url \n * @param {*} access_token \n */\nconst GET_API_REQUEST = (str_url) => {\n    var dict_header = {}\n    dict_header['Accept'] = \"application/json\"\n    dict_header['Content-Type'] = \"application/json\"\n    return fetch(str_url, {\n        method: 'GET',\n        headers: dict_header\n    })\n        .then((response) => {\n            if (response.ok) {\n                return response.json();\n            } else {\n                throw new Error('Something went wrong ...');\n            }\n        }\n        ).then(responseData => {\n            return responseData;\n        })\n        .catch((error) => {\n            return error\n        })\n\n}\n\n/**\n * POST REQUEST\n * @param {*} str_url \n * @param {*} str_body \n * @param {*} access_token \n */\nconst POST_API_REQUEST = (str_url, str_body, access_token) => {\n    var dict_header = {}\n    dict_header['Accept'] = \"application/json\"\n    dict_header['Content-Type'] = \"application/json\"\n\n    return fetch(str_url, {\n        method: 'POST',\n        body: str_body,\n        headers: dict_header,\n    })\n        .then((response) => {\n            if (response.ok) {\n                return response.json();\n            } else {\n                throw new Error('Something went wrong ...');\n            }\n        }\n        ).then(responseData => {\n            return responseData;\n        })\n        .catch((error) => {\n            return error\n        })\n}\n\n\n\n\nexport {\n    GET_API_REQUEST,\n    POST_API_REQUEST\n}","const BASE_URL = {\n    URL: process.env.NODE_ENV === 'production' ? 'https://swapi.co/api/' : 'https://swapi.co/api/'\n}\n\n\nconst PEOPLE = {\n    PEOPLE_URL:\"people\"\n}\nconst PLANET = {\n    PLANET_URL:\"planets\"\n}\nexport {\n    BASE_URL,\n    PEOPLE,\n    PLANET\n}","import { BASE_URL } from \"./urlSchema\";\n\n/**\n * pass only endpoint\n * @param {*} str_endpoint \n */\nconst CREATE_REQUEST_URL = (str_endpoint) => {\n    return BASE_URL.URL+str_endpoint\n}\n\nexport {\n    CREATE_REQUEST_URL\n}","import React, { Component } from 'react';\nimport './authLogin.css'\nimport { withRouter } from 'react-router-dom';\nimport { rout_dashBoard, rout_login } from '../../router/routerPath';\nimport { ACTION_IS_LOGIN,ACTION_LOGIN_USER_INFO } from '../../action';\nimport { connect } from 'react-redux';\nimport { login } from '../../apiRequest';\nimport { Row, Col } from 'react-bootstrap';\nimport { Textbox } from 'react-inputs-validation';\nimport 'react-inputs-validation/lib/react-inputs-validation.min.css';\nimport {\n    ClipLoader,\n} from 'react-spinners';\nclass AuthLogin extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            txt_username: '',\n            txt_password: '',\n            isStartLoader: false,\n            errorMessage: ''\n        }\n    }\n\n    componentDidMount() {\n        /**\n         * handle back button\n         */\n        window.addEventListener(\"popstate\", e => {\n            if (this.state.is_login) {\n                this.props.history.push(rout_dashBoard)\n            }\n            else {\n                if (window.location.pathname === rout_login) {\n                    this.props.history.push(rout_login)\n                }\n                else {\n                    this.props.history.push(rout_login)\n                }\n            }\n        });\n\n    }\n    login() {\n        this.setState({ isStartLoader: true })\n        login(this.state.txt_username)\n            .then(res => {\n                if(res && res.length>0){\n                    let name = res[0]['name'];\n                    let bdat = res[0]['birth_year'];\n                    if(name === this.state.txt_username && bdat===this.state.txt_password){\n                        this.setState({ isStartLoader: false, errorMessage: 'You are logged in successfully.' }, () => {\n                            this.setTimerForErrorInvisible(true,res[0]);\n                        })\n                    }else{\n                        this.setState({ isStartLoader: false, errorMessage: 'Enter Wrong Credential.' }, () => {\n                            this.setTimerForErrorInvisible(false,null);\n                        })\n                    }\n                }else{\n                    this.setState({ isStartLoader: false, errorMessage: 'User not found.' }, () => {\n                        this.setTimerForErrorInvisible(false,null);\n                    })\n                }\n                \n            })\n            .catch(err => {\n                this.setState({ isStartLoader: false, errorMessage: err }, () => {\n                    this.setTimerForErrorInvisible(false,null);\n                })\n            })\n    }\n\n    setTimerForErrorInvisible(isLogin,loginInfo) {\n        setTimeout(() => {\n            this.setState({ errorMessage: \"\" }, () => {\n                if (isLogin) {\n                    this.props.ACTION_IS_LOGIN(true)\n                    this.props.ACTION_LOGIN_USER_INFO(loginInfo);\n                    this.props.history.replace(rout_dashBoard)\n                    this.props.history.go(1)\n                }\n            });\n        }, 2000);\n    }\n    btnLoginClicked() {\n        if (this.state.txt_username.length <= 0) {\n            alert('Kindly enter username');\n\n        } else if (this.state.txt_password.length <= 0) {\n            alert('Kindly enter password');\n\n        } else {\n            this.login();\n        }\n    }\n    renderLoader() {\n\n        return (<ClipLoader\n            sizeUnit={\"px\"}\n            size={25}\n            color={'#FFE300'}\n            loading={this.state.isStartLoader}\n        />)\n\n    }\n    renderError() {\n        if (this.state.errorMessage.length > 0) {\n            return (<label>{this.state.errorMessage}</label>)\n        }\n\n    }\n    render() {\n        return (\n            <div>\n                <Row className=\"login-form-row\">\n                    <Col xs={{ span: 12, offset: 12 }} lg={{ span: 4, offset: 4 }}>\n                        <div className=\"login-form-div\">\n                            <section className=\"login-form-title-section\">\n                                <label className=\"login-form-label-title\">\n                                    Login With Star Wars Characters\n                                </label>\n                            </section>\n                            <section className=\"login-form-text-field-section\">\n                                <Textbox\n                                    attributesInput={{\n                                        id: 'Name',\n                                        name: 'Name',\n                                        type: 'text',\n                                        placeholder: 'Username',\n                                        className: 'TextBoxDesign'\n                                    }}\n                                    value={this.state.txt_username}\n                                    onChange={(name, e) => {\n                                        this.setState({ txt_username: name });\n\n                                    }}\n                                    onBlur={(e) => { console.log(e) }} // \n                                    validationOption={{\n                                        name: 'Username', // Optional.[String].Default: \"\". To display in the Error message. i.e Please enter your {name}.\n                                        check: true, // Optional.[Bool].Default: true. To determin if you need to validate.\n                                        required: true // Optional.[Bool].Default: true. To determin if it is a required field.\n                                    }}\n\n                                ></Textbox>\n                                <br />\n                                <Textbox\n                                    attributesInput={{\n                                        id: 'Password',\n                                        name: 'Password',\n                                        type: 'password',\n                                        placeholder: 'Password',\n                                        className: 'TextBoxDesign'\n                                    }}\n                                    value={this.state.txt_password}\n                                    onChange={(name, e) => {\n                                        this.setState({ txt_password: name });\n\n                                    }}\n                                    onBlur={(e) => { console.log(e) }} // \n                                    validationOption={{\n                                        name: 'Password', // Optional.[String].Default: \"\". To display in the Error message. i.e Please enter your {name}.\n                                        check: true, // Optional.[Bool].Default: true. To determin if you need to validate.\n                                        required: true // Optional.[Bool].Default: true. To determin if it is a required field.\n                                    }}\n                                ></Textbox>\n                            </section>\n                            <br />\n                            {this.renderLoader()}\n                            {this.renderError()}\n                            <br />\n                            <section>\n                                <button\n                                    className=\"login-form-submit-button\"\n                                    onClick={() => { this.btnLoginClicked() }}\n                                >\n                                    Login\n                                </button>\n                            </section>\n                        </div>\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = function (state) {\n    const { is_login } = state.AuthReducer\n    return {\n        is_login\n    }\n}\n\nconst _connect = connect(mapStateToProps, {\n    ACTION_IS_LOGIN,\n    ACTION_LOGIN_USER_INFO\n})(AuthLogin)\n\n\n\nexport default withRouter(_connect)","const rout_login = \"/auth-login\"\n\nconst rout_dashBoard = \"/search-bar\"\n\n\nexport {\n    rout_login,\n    rout_dashBoard,\n}","import {\r\n    GET_API_REQUEST\r\n} from '../../helper/requestHelper/apiRequest';\r\n\r\nimport {\r\n    PEOPLE\r\n} from '../../helper/requestHelper/urlSchema';\r\n\r\nimport { CREATE_REQUEST_URL } from '../../helper/requestHelper/apiRequestUrl';\r\n\r\n// login api for authantication\r\nconst login = (userName) => {\r\n    return new Promise((resolve, rejects) => {\r\n        let str_url = CREATE_REQUEST_URL(PEOPLE.PEOPLE_URL) + \"?search=\" + userName;\r\n        GET_API_REQUEST(str_url, '')\r\n            .then(response => {\r\n                if (response && Object.keys(response).length > 0) {\r\n                    resolve(response['results'])\r\n                }\r\n            })\r\n            .catch(error => {\r\n                rejects(error.message)\r\n            })\r\n    })\r\n}\r\n\r\nexport {\r\n    login\r\n}","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport './searchPlanet.css';\nimport { rout_login, rout_dashBoard } from '../../router/routerPath';\nimport { connect } from 'react-redux';\nimport { ACTION_IS_LOGIN, ACTION_LOGOUT } from '../../action';\nimport { searchPlanet } from '../../apiRequest';\nclass SearchDashboard extends Component {\n\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            \n            searchString: '',\n            searchIndex: 1,\n            serachResults: [],\n            time: 0,\n            isOn: false,\n            start: 0\n        }\n        this.startTimer = this.startTimer.bind(this)\n        this.stopTimer = this.stopTimer.bind(this)\n        this.resetTimer = this.resetTimer.bind(this)\n    }\n    startTimer() {\n        this.setState({\n            isOn: true,\n            time: this.state.time,\n            start: Date.now() - this.state.time\n        })\n        this.timer = setInterval(() => this.setState({\n            time: Date.now() - this.state.start\n        }, () => {\n            if (this.state.time > 60000) {\n                this.resetTimer();\n            }\n        }), 1000);\n    }\n    stopTimer() {\n        this.setState({ isOn: false })\n        clearInterval(this.timer)\n    }\n    resetTimer() {\n        this.setState({ time: 0, isOn: false, searchIndex: 1 }, () => {\n            this.startTimer();\n        })\n    }\n    componentDidMount() {\n        window.addEventListener(\"popstate\", e => {\n            if (this.props.is_login) {\n                if (this.props.history.location.pathname === rout_login) {\n                    this.props.history.push(rout_dashBoard)\n                }\n            }\n        });\n        this.startTimer();\n    }\n    componentWillUnmount() {\n        this.stopTimer()\n    }\n    renderLogoutButton() {\n        return (<section>\n            <div style={{ 'textAlign': 'center' }}>\n                <button\n                    className=\"search-form-submit-button\"\n                    onClick={() => { this.btnLogoutClicked() }}\n                >\n                    Logout\n            </button>\n            </div>\n        </section>);\n    }\n\n    btnLogoutClicked() {\n        this.props.ACTION_IS_LOGIN(false)\n        this.props.ACTION_LOGOUT({});\n        this.props.history.replace(rout_login)\n        this.props.history.go(1)\n    }\n    onEnterKeyPress() {\n        if (this.state.searchString.length > 0) {\n            if (this.props.user_login_info['name'] !== \"Luke Skywalker\" && this.state.searchIndex > 15) {\n                alert('Search limit exceeded. You can make only 15 serach in a minut.')\n            } else {\n                this.doSearchPlanet();\n            }\n        } else {\n            this.setState({ serachResults: [] })\n        }\n    }\n    doSearchPlanet() {\n        searchPlanet(this.state.searchString)\n            .then(res => {\n                if (res && res.length > 0) {\n                    try {\n                        res.sort((a, b) =>\n\n                            ((b.population === \"unknown\" ? 0 : b.population) - (a.population === \"unknown\" ? 0 : a.population))\n                        )\n                    } catch (ex) {\n\n                    }\n                }\n                this.setState({ serachResults: res })\n                this.setState({ searchIndex: (this.state.searchIndex + 1) })\n            })\n            .catch(err => {\n                this.setState({ searchIndex: (this.state.searchIndex + 1) })\n                alert(err)\n            })\n    }\n    handleSearch(e) {\n        e.preventDefault();\n        this.setState({\n            searchString: e.target.value\n        }, () => {\n            this.onEnterKeyPress();\n        });\n    }\n    renderSerachItems() {\n        if (this.state.serachResults.length > 0) {\n            return this.state.serachResults.map((item, i) => {\n                return (\n                    <div className=\"search-result-item\">\n                        <lable>{\"Planet Name : \" + item.name}</lable>\n                        <br />\n                        <lable style={{ 'font-size': (30 - i) }}>{\"Population : \" + item.population}</lable>\n                    </div>\n\n                );\n            })\n        } else {\n            return (<lable>0 Results</lable>);\n        }\n    }\n    render() {\n        return (\n            <div>\n                <section className=\"search-form-title-section\">\n                    <h3><label className=\"search-form-label-title\">\n                        Search Starwars Planets\n                                </label></h3>\n                </section>\n                {/* <lable>timer : {ms(this.state.time)}</lable> */}\n                {this.renderLogoutButton()}\n                <div style={{ 'textAlign': 'center' }}>\n                    <input\n                        type=\"text\"\n                        placeholder={'Type planet name here'}\n                        className=\"SearchTextBoxDesign\"\n                        value={this.state.searchString}\n                        onChange={this.handleSearch.bind(this)}\n                    // onKeyPress={e => {\n                    //     if (e.key === \"Enter\") {\n                    //         this.onEnterKeyPress();\n                    //     }\n                    // }}\n                    />\n\n                </div>\n                <div className=\"search-result-div\">\n\n                    {this.renderSerachItems()}\n\n                </div>\n            </div>\n        )\n    }\n}\n\n\nconst mapStateToProps = function (state) {\n    const { is_login,\n        user_login_info } = state.AuthReducer\n    return {\n        is_login,\n        user_login_info\n    }\n}\n\nconst _connect = connect(mapStateToProps, {\n    ACTION_IS_LOGIN,\n    ACTION_LOGOUT\n})(SearchDashboard)\n\n\n\nexport default withRouter(_connect)","import {\n    GET_API_REQUEST\n} from '../../helper/requestHelper/apiRequest';\n\nimport {\n    PLANET\n} from '../../helper/requestHelper/urlSchema';\n\nimport { CREATE_REQUEST_URL } from '../../helper/requestHelper/apiRequestUrl';\n\n// planet search api.\nconst searchPlanet = (planetName) => {\n    return new Promise((resolve, rejects) => {\n        let str_url = CREATE_REQUEST_URL(PLANET.PLANET_URL) + \"?search=\" + planetName+\"&format=json\";\n        GET_API_REQUEST(str_url, '')\n            .then(response => {\n                if (response && Object.keys(response).length > 0) {\n                    resolve(response['results'])\n                }\n            })\n            .catch(error => {\n                rejects(error.message)\n            })\n    })\n}\n\nexport {\n    searchPlanet\n}","import React, { Component } from 'react';\nimport {\n    BrowserRouter as Router,\n    Route,\n    Switch,\n    Redirect\n} from 'react-router-dom';\n\n\nimport {\n    connect\n} from 'react-redux';\n\nimport AuthLogin from '../container/authLogin/authLogin';\nimport SearchDashboard from '../container/searchData/searchDashboard';\n\nimport { rout_login, rout_dashBoard } from './routerPath';\n\nclass RootRouter extends Component {\n\n\n    renderLoginRouter() {\n        if (!this.props.is_login) {\n            return <Switch>\n                <Route path={rout_login} component={AuthLogin} />\n            </Switch>\n        }\n    }\n\n    renderRouteIfLogin() {\n        if (this.props.is_login) {\n            return <Switch>\n                <Route path={rout_dashBoard} component={SearchDashboard} />\n            </Switch>\n        }\n\n    }\n\n    checkIfLogin() {\n        if (this.props.is_login) {\n            return rout_dashBoard\n        }\n        else {\n            return rout_login\n        }\n    }\n\n\n    render() {\n        return (\n            <Router>\n                <div>\n                    <Route path={'/'}>\n                        <Redirect to={this.checkIfLogin()} />\n                    </Route>\n                    {this.renderLoginRouter()}\n                    {this.renderRouteIfLogin()}\n                </div>\n            </Router>\n        )\n    }\n}\n\nconst mapStateToProps = function (state) {\n    const { is_login } = state.AuthReducer\n    return {\n        is_login\n    }\n}\n\nexport default connect(mapStateToProps, {})(RootRouter);","import {\n    TYPE_IS_LOGIN, TYPE_LOGIN_INFO, TYPE_LOGOUT\n} from '../../typeRedux';\n\nconst INIT_STATE = {\n    is_login: false,\n    user_login_info: {}\n}\n\nexport default function eventAuthUser(state = INIT_STATE, action) {\n    switch (action.type) {\n\n        case TYPE_IS_LOGIN:\n            return {\n                ...state,\n                is_login: action.payload\n            }\n\n        case TYPE_LOGIN_INFO:\n            return {\n                ...state,\n                user_login_info: action.payload\n            }\n\n        case TYPE_LOGOUT:\n            return {\n                ...state,\n                is_login: false,\n                user_login_info: {}\n            }\n\n        default:\n            return state\n    }\n}","import { combineReducers } from \"redux\";\n\n/**\n * import reducer class\n */\nimport AuthReducer from './auth/authReducer';\n\nconst rootReducer = combineReducers({\n  AuthReducer\n});\n\nexport default rootReducer;\n","import RootReducer from '../reducer/rootReducer';\nimport {\n  createStore,\n  applyMiddleware,\n  compose\n} from 'redux';\n\nimport thunk from 'redux-thunk';\n\nimport StateLoader from \"./stateLoader\"\n\nconst stateLoader = new StateLoader();\n\nconst nodeEnv = process.env.NODE_ENV || 'development';\nconst isProduction = nodeEnv === 'production';\n\nconst composeEnhancers =\n  typeof window === 'object' && !isProduction &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n    }) : compose;\n\n\n\n\nconst enhancer = composeEnhancers(\n  applyMiddleware(thunk)\n);\n\n\nvar store = createStore(\n  RootReducer,\n  stateLoader.loadState()\n  ,enhancer\n);\n\nstore.subscribe(() => {\n  stateLoader.saveState(store.getState());\n});\n\nexport {\n  store\n}","class StateLoader {\n\n    loadState() {\n        try {\n            let serializedState = localStorage.getItem(\"starWarGetStore\");\n\n            if (serializedState === null) {\n                return this.initializeState();\n            }\n\n            return JSON.parse(serializedState);\n        }\n        catch (err) {\n            return this.initializeState();\n        }\n    }\n\n    saveState(state) {\n        try {\n            let serializedState = JSON.stringify(state);\n            localStorage.setItem(\"starWarGetStore\", serializedState);\n\n        }\n        catch (err) {\n        }\n    }\n\n    initializeState() {\n        return {\n            //state object\n        }\n    };\n}\n\n\nexport default StateLoader","import React from 'react';\nimport './App.css';\nimport RootRouter from './router/rootRouter';\nimport {\n  Provider\n} from 'react-redux';\n\nimport {\n  store\n} from './reduxStore/createStoreRedux';\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <RootRouter />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}